version: '3.7'
services:

  mysql:
    image: mysql:5.7
    container_name: ${NAMESPACE}-db
    ports:
    - 3314:3306
    volumes:
    - ./.config/mysql/tor.cnf:/etc/mysql/conf.d/my.cnf
    - db-data:/var/lib/mysql
    networks:
    - internal
    - web
    environment:
      MYSQL_DATABASE: ${TOR_MYSQL_DATABASE}
      MYSQL_PASSWORD: ${TOR_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TOR_MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${TOR_MYSQL_USER}
    restart: unless-stopped

  backup:
    image: zeenlym/mariadb-backup
    container_name: ${NAMESPACE}-backup
    depends_on:
    - mysql
    restart: unless-stopped
    links:
    - mysql:mysql
    networks:
    - internal
    environment:
    - TIMEZONE=${TIME_ZONE}
    - SCHEDULE=0 0 0 3 *
    - BACKUP_METHOD=mysqldump
    - MYSQL_HOST=mysql
    - MYSQL_DATABASE=${TOR_MYSQL_DATABASE}
    - MYSQL_USER=${TOR_MYSQL_USER}
    - MYSQL_PASSWORD=${TOR_MYSQL_PASSWORD}
    volumes:
    - ./shard/backup:/backup
    restart: unless-stopped

  redis:
    image: redis
    ports:
    - 6379:6379
    networks:
    - internal
    - web

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8081:8081"
    networks:
    - internal
    - web

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    networks:
    - internal
    - web

  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.1
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
    - internal
    - web

  mongo:
    image: webhippie/mongodb:latest
    container_name: ${NAMESPACE}-mongodb
    restart: always
    ports:
    - 27017:27017
    - 28017:28017
    - 27019:27019
    volumes:
    - mongo-data:/var/lib/mongodb/db
    - mongo-backup:/var/lib/backup
    networks:
    - internal
    environment:
    - MONGODB_AUTH=${MONGODB_AUTH}
    - MONGODB_AUTH_DB=${MONGODB_AUTH_DB}
    - MONGODB_DATABASE=${MONGODB_DATABASE}
    - MONGODB_DBPATH=${MONGODB_DBPATH}
    - MONGODB_PASSWORD=${MONGODB_PASSWORD}
    - MONGODB_REST=${MONGODB_REST}
    - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    - MONGODB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
    - MONGODB_USERNAME=${MONGODB_USERNAME}
    - MONGODB_VERBOSE=${MONGODB_VERBOSE}

  mongoexpress:
    restart: always
    image: mongo-express
    container_name: ${NAMESPACE}-mongoexpress
    links:
    - mongo:mongo
    environment:
    - VCAP_APP_PORT=8090
    - ME_CONFIG_MONGODB_AUTH_USERNAME=""
    - ME_CONFIG_MONGODB_AUTH_PASSWORD=""
    depends_on:
    - mongo
    ports:
    - 8090:8090
    networks:
    - internal
    - web

  tor:
    restart: always
    container_name: ${NAMESPACE}-tor-haproxy
    image: x0rzkov/tor-haproxy:latest
    build:
      context: .docker/tor-haproxy
      dockerfile: Dockerfile
    environment:
    - privoxy=1
    - privoxy_port=8119
    - tors=75
    networks:
    - internal
    - web
    ports:
    - 5566:5566
    - 2090:2090
    - 8119:8119

  spider:
    image: tor-spider
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
    #  - tor
      - redis
      - elasticsearch
      - mongo
    volumes:
    - ./blacklist.txt:/dist/blacklist.txt
    ports:
    - 8888:8888
    networks:
    - internal
    - web
    environment:
    - REDIS_URI=${REDIS_URI}
    - ELASTIC_URI=${ELASTIC_URI}
    - ELASTIC_INDEX=${ELASTIC_INDEX}
    - PROXY_URI=${PROXY_URI}
    - MONGO_URI=${MONGO_URI}
    - MONGO_DB=${MONGO_DB}
    - MONGO_COL=${MONGO_COL}
    command: ["./tor-spider", "-b", "/dist/blacklist.txt"]

volumes:
  mongo-data:
  mongo-backup:
  db-data:

networks:
  internal:
  web:
    external: true
